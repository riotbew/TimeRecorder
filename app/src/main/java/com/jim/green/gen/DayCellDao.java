package com.jim.green.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import android.util.SparseArray;
import com.jim.recorder.model.DayConverter;

import com.jim.recorder.model.DayCell;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAY_CELL".
*/
public class DayCellDao extends AbstractDao<DayCell, Long> {

    public static final String TABLENAME = "DAY_CELL";

    /**
     * Properties of entity DayCell.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time = new Property(0, long.class, "time", true, "_id");
        public final static Property Datas = new Property(1, String.class, "datas", false, "DATAS");
    }

    private final DayConverter datasConverter = new DayConverter();

    public DayCellDao(DaoConfig config) {
        super(config);
    }
    
    public DayCellDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAY_CELL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: time
                "\"DATAS\" TEXT);"); // 1: datas
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAY_CELL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DayCell entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        SparseArray datas = entity.getDatas();
        if (datas != null) {
            stmt.bindString(2, datasConverter.convertToDatabaseValue(datas));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DayCell entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTime());
 
        SparseArray datas = entity.getDatas();
        if (datas != null) {
            stmt.bindString(2, datasConverter.convertToDatabaseValue(datas));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DayCell readEntity(Cursor cursor, int offset) {
        DayCell entity = new DayCell( //
            cursor.getLong(offset + 0), // time
            cursor.isNull(offset + 1) ? null : datasConverter.convertToEntityProperty(cursor.getString(offset + 1)) // datas
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DayCell entity, int offset) {
        entity.setTime(cursor.getLong(offset + 0));
        entity.setDatas(cursor.isNull(offset + 1) ? null : datasConverter.convertToEntityProperty(cursor.getString(offset + 1)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DayCell entity, long rowId) {
        entity.setTime(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DayCell entity) {
        if(entity != null) {
            return entity.getTime();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DayCell entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
