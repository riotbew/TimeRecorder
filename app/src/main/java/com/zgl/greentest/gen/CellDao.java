package com.zgl.greentest.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jim.recorder.model.Cell;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CELL".
*/
public class CellDao extends AbstractDao<Cell, Void> {

    public static final String TABLENAME = "CELL";

    /**
     * Properties of entity Cell.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IsSelected = new Property(0, boolean.class, "isSelected", false, "IS_SELECTED");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Position = new Property(2, int.class, "position", false, "POSITION");
    }


    public CellDao(DaoConfig config) {
        super(config);
    }
    
    public CellDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CELL\" (" + //
                "\"IS_SELECTED\" INTEGER NOT NULL ," + // 0: isSelected
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"POSITION\" INTEGER NOT NULL );"); // 2: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CELL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cell entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cell entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIsSelected() ? 1L: 0L);
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getPosition());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Cell readEntity(Cursor cursor, int offset) {
        Cell entity = new Cell( //
            cursor.getShort(offset + 0) != 0, // isSelected
            cursor.getInt(offset + 1), // type
            cursor.getInt(offset + 2) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cell entity, int offset) {
        entity.setIsSelected(cursor.getShort(offset + 0) != 0);
        entity.setType(cursor.getInt(offset + 1));
        entity.setPosition(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Cell entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Cell entity) {
        return null;
    }

    @Override
    public boolean hasKey(Cell entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
